# Square
[modules.square]
docs = """
Creates a square or rectangle in the first quadrant.
"""
dimensions = 2
manual_url = "https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/2D_Primitives#square"

[modules.square.constructors._default]
arguments = ["size"]

[modules.square.parameters.size]
docs = """
single value, square with both sides this length
2 value array [x,y], rectangle with dimensions x and y
"""
type = "length2"
alt = ["length"]
default = [1.0, 1.0]

[modules.square.parameters.center]
docs = """
false (default), 1st (positive) quadrant, one corner at (0,0)
true, square is centered at (0,0)
"""
type = "bool"
default = false

# Circle
[modules.circle]
docs = """
Creates a circle at the origin.
"""
dimensions = 2
manual_url = "https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/2D_Primitives#square"

[modules.circle.constructors._default]
arguments = ["radius"]

[modules.circle.parameters.radius]
name = "r"
docs = """
circle radius
"""
type = "length"
default = 1.0

[modules.circle.parameters.fragment_angle]
name = "$fa"
docs = """
Fragment angle in degrees
"""
type = "angle"
default = 12.0

[modules.circle.parameters.fragment_size]
name = "$fs"
docs = """
Fragment size in mm
"""
type = "length"
default = 2.0

[modules.circle.parameters.fragment_resolution]
name = "$fn"
docs = """
Fragment resolution
"""
type = "fragment_resolution"
default = 0.0

# Text
[modules.text]
docs = """

"""
dimensions = 2

[modules.text.constructors._default]
arguments = ["text"]

[modules.text.parameters.text]
docs = """
The text to generate.
"""
type = "string"

[modules.text.parameters.size]
docs = """
The generated text has an ascent (height above the baseline) of approximately the given value. Default is 10. Different fonts can vary somewhat and may not fill the size specified exactly, typically they render slightly smaller. On a metric system a size of 25.4 (1" imperial) will correspond to 100pt ⇒ a 12pt font size would be 12×0.254 for metric conversion or 0.12 in imperial.
"""
type = "scalar"
default = 10

[modules.text.parameters.font]
docs = """
The name of the font that should be used. This is not the name of the font file, but the logical font name (internally handled by the fontconfig library). This can also include a style parameter, see below. A list of installed fonts & styles can be obtained using the font list dialog (Help -> Font List).
"""
type = "string"

[modules.text.parameters.halign]
docs = """
The horizontal alignment for the text. Possible values are "left", "center" and "right". Default is "left".
"""
type = "string"
default = "left"
# TODO add support for enums

[modules.text.parameters.valign]
docs = """
The vertical alignment for the text. Possible values are "top", "center", "baseline" and "bottom". Default is "baseline".
"""
type = "string"
default = "left"
# TODO add support for enums

# Polygon
[modules.polygon]
docs = """
The function polygon() creates a multiple sided shape from a list of x,y coordinates. A polygon is the most powerful 2D object. It can create anything that circle and squares can, as well as much more. This includes irregular shapes with both concave and convex edges. In addition it can place holes within that shape.
"""
dimensions = 2
manual_url = "https://en.wikibooks.org/wiki/OpenSCAD_User_Manual/2D_Primitives#polygon"

[modules.polygon.constructors._default]
arguments = ["points"]

[modules.polygon.parameters.points]
docs = """
The list of x,y points of the polygon. : A vector of 2 element vectors.
Note: points are indexed from 0 to n-1.
"""
type = "vec_length2"
default = []

[modules.polygon.parameters.paths]
docs = """
A closed shape is created by returning from the last point specified to the first.

### Default
If no path is specified, all points are used in the order listed.

### Single Vector
The order to traverse the points. Uses indices from 0 to n-1. May be in a different order and use all or part, of the points listed.

### Multiple Vectors
Creates primary and secondary shapes. Secondary shapes are subtracted from the primary shape (like difference()). Secondary shapes may be wholly or partially within the primary shape.
"""
type = "vec_length2"
default = []

[modules.polygon.parameters.convexity]
docs = """
Integer number of "inward" curves, ie. expected path crossings of an arbitrary line through the polygon
"""
type = "scalar"
default = 1